#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/pointing.h>

/ {
    behaviors {
        hml: homewrow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT_HAND";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <30 31 32 33 6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35>;
            flavor = "balanced";
            quick-tap-ms = <175>;
            hold-trigger-on-release;
        };

        hmr: homewrow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEREOW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <250>;
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29>;
            quick-tap-ms = <175>;
            hold-trigger-on-release;
            flavor = "balanced";
        };

        sys_layer: sys_layer {
            compatible = "zmk,behavior-hold-tap";
            label = "SYS_LAYER";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            hold-trigger-key-positions = <0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        Default {
            bindings = <
&kp ESCAPE  &kp SQT          &kp COMMA        &kp PERIOD         &kp P                &kp Y                 &kp F            &kp G                 &kp C               &kp R             &kp L             &kp MINUS
&kp TAB     &hml LEFT_GUI A  &hml LEFT_ALT O  &hml LEFT_SHIFT E  &hml LEFT_CONTROL U  &kp I                 &kp D            &hmr RIGHT_CONTROL H  &hmr RIGHT_SHIFT T  &hmr RIGHT_ALT N  &hmr RIGHT_GUI S  &kp ENTER
&caps_word  &kp SQT          &kp Q            &kp J              &kp K                &kp X                 &kp B            &kp M                 &kp W               &kp V             &kp Z             &kp QUESTION
                                              &mo 1              &kp DELETE           &sys_layer 2 SPACE    &kp RIGHT_SHIFT  &kp BACKSPACE         &mo 3
            >;
        };

        layer_1 {
            bindings = <
&trans  &trans  &trans    &kp UP    &trans     &trans    &trans  &kp N7  &kp N8  &kp N9  &trans  &trans
&trans  &trans  &kp LEFT  &kp DOWN  &kp RIGHT  &trans    &trans  &kp N4  &kp N5  &kp N6  &trans  &trans
&trans  &trans  &trans    &trans    &trans     &trans    &trans  &kp N1  &kp N2  &kp N3  &trans  &trans
                          &trans    &trans     &trans    &trans  &trans  &trans
            >;
        };

        System {
            bindings = <
&kp LS(LC(ESCAPE))  &trans    &kp LC(V)  &kp LC(X)     &kp LS(C)  &trans    &bt BT_SEL 0  &bt BT_SEL 1    &bt BT_SEL 2    &bt BT_SEL 3  &bt BT_SEL 4     &bt BT_CLR
&trans              &kp LEFT  &kp DOWN   &kp UP_ARROW  &kp RIGHT  &trans    &trans        &mmv MOVE_LEFT  &mmv MOVE_DOWN  &mmv MOVE_UP  &mmv MOVE_RIGHT  &trans
&trans              &trans    &trans     &trans        &trans     &trans    &trans        &trans          &trans          &trans        &trans           &trans
                                         &trans        &trans     &trans    &trans        &mkp LCLK       &mkp RCLK
            >;
        };

        Symbols {
            bindings = <
&trans  &kp N1         &kp N2              &kp N3            &kp N4                &kp N5                  &kp N6     &kp N7                 &kp N8             &kp N9           &kp N0            &trans
&trans  &kp LESS_THAN  &kp RS(LEFT_BRACE)  &kp LEFT_BRACKET  &kp LEFT_PARENTHESIS  &kp NON_US_BACKSLASH    &kp GRAVE  &kp RIGHT_PARENTHESIS  &kp RIGHT_BRACKET  &kp RIGHT_BRACE  &kp GREATER_THAN  &trans
&trans  &trans         &trans              &trans            &trans                &trans                  &trans     &trans                 &trans             &trans           &trans            &trans
                                           &trans            &trans                &trans                  &trans     &trans                 &trans
            >;
        };
    };
};

